import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: BoatRentalPage(),
    );
  }
}

class BoatRentalPage extends StatefulWidget {
  @override
  _BoatRentalPageState createState() => _BoatRentalPageState();
}

class _BoatRentalPageState extends State<BoatRentalPage> {
  DateTime _startDate;
  DateTime _endDate;
  int _numberOfPeople;
  double _totalCost;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Boat Rental'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            Text('Start Date: ${_startDate?.toString() ?? 'Not selected'}'),
            RaisedButton(
              onPressed: _selectStartDate,
              child: Text('Select Start Date'),
            ),
            SizedBox(height: 16.0),
            Text('End Date: ${_endDate?.toString() ?? 'Not selected'}'),
            RaisedButton(
              onPressed: _selectEndDate,
              child: Text('Select End Date'),
            ),
            SizedBox(height: 16.0),
            TextField(
              decoration: InputDecoration(labelText: 'Number of People'),
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  _numberOfPeople = int.parse(value);
                });
              },
            ),
            SizedBox(height: 16.0),
            RaisedButton(
              onPressed: _calculateTotalCost,
              child: Text('Calculate Total Cost'),
            ),
            SizedBox(height: 16.0),
            Text('Total Cost: \$${_totalCost ?? 0}'),
            SizedBox(height: 16.0),
            RaisedButton(
              onPressed: _rentBoat,
              child: Text('Rent Boat'),
            ),
          ],
        ),
      ),
    );
  }

  void _selectStartDate() async {
    final selectedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
    if (selectedDate != null) {
      setState(() {
        _startDate = selectedDate;
      });
    }
  }

  void _selectEndDate() async {
    final selectedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
